package items

import "fmt"

type ItemType string
type ItemSubType string
type SocketType int

const (
	ITEM_WEAPON   ItemType = "weapon"
	ITEM_ARMOR    ItemType = "armor"
	ITEM_DEVICE   ItemType = "device"
	ITEM_METAL    ItemType = "metal"
	ITEM_GAS      ItemType = "gas"
	ITEM_JUNK     ItemType = "junk"
	ITEM_DUST     ItemType = "dust"
	ITEM_CRYSTALS ItemType = "crystals"
	ITEM_BALLOON  ItemType = "balloon"
	ITEM_CONSOLE  ItemType = "console"

	ITEM_SUB_BOER    ItemSubType = "boer"
	ITEM_SUB_NULL_T  ItemSubType = "nullt"
	ITEM_SUB_SCANNER ItemSubType = "scanner"

	// sockets
	ITEM_SOCKET_TYPE_DAMAGE SocketType = 1
	ITEM_SOCKET_TYPE_ARMOR  SocketType = 2
	ITEM_SOCKET_TYPE_HP     SocketType = 3
	ITEM_SOCKET_TYPE_MINE   SocketType = 4
	ITEM_SOCKET_TYPE_AIR    SocketType = 5
)

func (s SocketType) String() string {
	switch s {
	case ITEM_SOCKET_TYPE_DAMAGE:
		return "damage"
	case ITEM_SOCKET_TYPE_ARMOR:
		return "armor"
	case ITEM_SOCKET_TYPE_HP:
		return "hp"
	case ITEM_SOCKET_TYPE_MINE:
		return "mine"
	case ITEM_SOCKET_TYPE_AIR:
		return "air"
	}
	return "unknown"
}

func (s SocketType) Icon() string {
	switch s {
	case ITEM_SOCKET_TYPE_DAMAGE:
		return "‚ö´"
	case ITEM_SOCKET_TYPE_ARMOR:
		return "‚ö™"
	case ITEM_SOCKET_TYPE_HP:
		return "üî¥"
	case ITEM_SOCKET_TYPE_MINE:
		return "üü†"
	case ITEM_SOCKET_TYPE_AIR:
		return "üîµ"
	}
	return "üîò"
}

func (s SocketType) Name() string {
	switch s {
	case ITEM_SOCKET_TYPE_DAMAGE:
		return "–£—Ä–æ–Ω"
	case ITEM_SOCKET_TYPE_ARMOR:
		return "–ë—Ä–æ–Ω—è"
	case ITEM_SOCKET_TYPE_HP:
		return "–û—á–∫–∏ –∂–∏–∑–Ω–∏"
	case ITEM_SOCKET_TYPE_MINE:
		return "–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–±—ã—á–∏"
	case ITEM_SOCKET_TYPE_AIR:
		return "–û–±—å–µ–º –±–∞–ª–ª–æ–Ω–æ–≤"
	}
	return "unknown"
}

func (s ItemType) String() string {
	return string(s)
}

func (s ItemType) Name() string {
	switch s {
	case ITEM_ARMOR:
		return "–ë—Ä–æ–Ω—è"
	case ITEM_WEAPON:
		return "–û—Ä—É–∂–∏–µ"
	case ITEM_METAL:
		return "–ú–µ—Ç–∞–ª–ª"
	case ITEM_GAS:
		return "–ì–∞–∑"
	case ITEM_JUNK:
		return "–•–ª–∞–º"
	case ITEM_CRYSTALS:
		return "–ö—Ä–∏—Å—Ç–∞–ª–ª—ã"
	case ITEM_DEVICE:
		return "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
	case ITEM_BALLOON:
		return "–ë–∞–ª–ª–æ–Ω—ã"
	}
	return "–ß–¢–û –≠–¢–û?"
}

func (s ItemSubType) Name() string {
	switch s {
	case ITEM_SUB_BOER:
		return "–ë—É—Ä"
	case ITEM_SUB_NULL_T:
		return "NULL-T"
	case ITEM_SUB_SCANNER:
		return "–°–∫–∞–Ω–µ—Ä"
	}
	return "–ß–¢–û –≠–¢–û?"
}

type Item struct {
	ID      int
	Title   string
	Type    ItemType
	Tier    string
	SubType ItemSubType
	Price   int
	Sell    int

	Damage int
	Armor  int
	Air    int
	Mine   int
	Time   int

	Reputation int
	SocketType SocketType
	Sockets    int
}

type Equipment struct {
	ID         int
	Title      string
	Type       string
	SubType    string
	BuyPrice   int
	SellPrice  int
	Reputation int

	Damage int
	Armor  int
	Air    int
	Mine   int
	Time   int

	SocketType SocketType
	Sockets    int
}

func (s *Item) Icon() string {
	switch s.Type {
	case ITEM_ARMOR:
		return "üõ°"
	case ITEM_WEAPON:
		return "‚öîÔ∏è"
	case ITEM_METAL:
		return "üß≤"
	case ITEM_GAS:
		return "üõ¢Ô∏è"
	case ITEM_JUNK:
		return "üßΩ"
	case ITEM_DEVICE:
		return "üõ†"
	}
	return ""
}

func (s *Item) ShopItemTitle() string {
	switch s.Type {
	case ITEM_WEAPON:
		return fmt.Sprintf("%s %s %s%d üí∞%d", s.Tier, s.Title, s.Icon(), s.Damage, s.Price)
	case ITEM_ARMOR:
		return fmt.Sprintf("%s %s %s%d üí∞%d", s.Tier, s.Title, s.Icon(), s.Armor, s.Price)
	case ITEM_BALLOON:
		return fmt.Sprintf("%s %s üå¨Ô∏è%d üí∞%d", s.Tier, s.Title, s.Air, s.Price)
	case ITEM_DEVICE:
		switch s.SubType {
		case ITEM_SUB_BOER:
			return fmt.Sprintf("%s %s %s%d ‚è±%d üí∞%d", s.Tier, s.Title, s.Icon(), s.Mine, s.Time, s.Price)
		case ITEM_SUB_NULL_T:
			return fmt.Sprintf("%s %s  ‚è±%d üí∞%d", s.Tier, s.Title, s.Time, s.Price)
		case ITEM_SUB_SCANNER:
			return fmt.Sprintf("%sÔ∏è %s üí∞%d", s.Tier, s.Title, s.Price)
		}

	case ITEM_METAL, ITEM_GAS, ITEM_JUNK:
		return fmt.Sprintf("%s %s üí∞%d", s.Tier, s.Title, s.Price)
	}
	return ""
}

func (s *Item) DisassemblyItemTitle() string {
	switch s.Type {
	case ITEM_WEAPON:
		return fmt.Sprintf("%sÔ∏è %s %s%d /disass_%d", s.Tier, s.Title, s.Icon(), s.Damage, s.ID)
	case ITEM_ARMOR:
		return fmt.Sprintf("%sÔ∏è %s %s%d /disass_%d", s.Tier, s.Title, s.Icon(), s.Armor, s.ID)
	case ITEM_BALLOON:
		return fmt.Sprintf("%sÔ∏è %s üå¨Ô∏è%d /disass_%d", s.Tier, s.Title, s.Air, s.ID)
	case ITEM_DEVICE:
		switch s.SubType {
		case ITEM_SUB_BOER:
			return fmt.Sprintf("%sÔ∏è %s %s%d ‚è±%d /disass_%d", s.Tier, s.Title, s.Icon(), s.Mine, s.Time, s.ID)
		case ITEM_SUB_NULL_T:
			return fmt.Sprintf("%sÔ∏è %s ‚è±%d /disass_%d", s.Tier, s.Title, s.Time, s.ID)
		case ITEM_SUB_SCANNER:
			return fmt.Sprintf("%sÔ∏è %s /disass_%d", s.Tier, s.Title, s.ID)
		}
	}
	return ""
}

func (s *Item) InventoryItemTitle() string {
	switch s.Type {
	case ITEM_WEAPON:
		return fmt.Sprintf("%sÔ∏è %s %s%d /equip_%d", s.Tier, s.Title, s.Icon(), s.Damage, s.ID)
	case ITEM_ARMOR:
		return fmt.Sprintf("%sÔ∏è %s %s%d /equip_%d", s.Tier, s.Title, s.Icon(), s.Armor, s.ID)
	case ITEM_BALLOON:
		return fmt.Sprintf("%sÔ∏è %s üå¨Ô∏è%d /equip_%d", s.Tier, s.Title, s.Air, s.ID)
	case ITEM_METAL, ITEM_GAS, ITEM_JUNK:
		return fmt.Sprintf("%sÔ∏è %s", s.Tier, s.Title)
	case ITEM_DEVICE:
		switch s.SubType {
		case ITEM_SUB_BOER:
			return fmt.Sprintf("%sÔ∏è %s %s%d ‚è±%d", s.Tier, s.Title, s.Icon(), s.Mine, s.Time)
		case ITEM_SUB_NULL_T:
			return fmt.Sprintf("%sÔ∏è %s ‚è±%d", s.Tier, s.Title, s.Time)
		case ITEM_SUB_SCANNER:
			return fmt.Sprintf("%sÔ∏è %s", s.Tier, s.Title)
		}
	}
	return ""
}

func (s *Item) SimpleItemTitle() string {
	switch s.Type {
	case ITEM_WEAPON:
		return fmt.Sprintf("%s %s %s%d", s.Tier, s.Title, s.Icon(), s.Damage)
	case ITEM_ARMOR:
		return fmt.Sprintf("%s %s %s%d", s.Tier, s.Title, s.Icon(), s.Armor)
	case ITEM_METAL, ITEM_GAS, ITEM_JUNK:
		return fmt.Sprintf("%s %s", s.Tier, s.Title)
	case ITEM_DEVICE:
		switch s.SubType {
		case ITEM_SUB_BOER:
			return fmt.Sprintf("%sÔ∏è %s %s%d ‚è±%d", s.Tier, s.Title, s.Icon(), s.Mine, s.Time)
		case ITEM_SUB_NULL_T:
			return fmt.Sprintf("%sÔ∏è %s ‚è±%d", s.Tier, s.Title, s.Time)
		case ITEM_SUB_SCANNER:
			return fmt.Sprintf("%sÔ∏è %s", s.Tier, s.Title)
		}
	case ITEM_BALLOON:
		return fmt.Sprintf("%s %s üå¨Ô∏è%d", s.Tier, s.Title, s.Air)
	}
	return ""
}

var Items []Item
